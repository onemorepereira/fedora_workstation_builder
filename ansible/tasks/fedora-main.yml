---
- hosts: localhost
  connection: local
  become: true
  become_user: root
  remote_user: "{{ sys_user }}"
  become_method: sudo

####### DEFINING VARIABLES AND SUCH ################################################
  vars_files:
    - ../vars/ssh-tunneling.yml
    - ../vars/code-repo-lists.yml

  pre_tasks:
    - set_fact:
        os_name: "{{ ansible_distribution }}"
        os_ver: "{{ ansible_distribution_major_version }}"

########### BASIC CONFIGURATION (basic_setup) ######################################
  tasks:
    - block:
      - name: Ensure the local system has a proper hostname
        hostname: name="fedora-{{ 999999 | random }}"
        when: "'fedora-' not in ansible_hostname"

      - name: Add management public key to target systems
        authorized_key: 
          user: "{{ item }}"
          key: "{{ public_key_value }}"
        with_items:
          - root
          - "{{ sys_user }}"
        when: public_key_value is defined
  
      - name: Import key-pairs as a variables 
        include_vars: ../vars/vault/secrets.yaml
        no_log: true
  
      - name: Deploy key-pairs
        copy:
          content: "{{ item.value.key_value }}"
          dest: "/home/{{ sys_user }}/.ssh/{{ item.value.key_name }}"
          owner: "{{ sys_user }}"
          group: "{{ sys_user }}"
          mode: 0600
        no_log: true
        with_dict: "{{ keys }}"
  
      - name: "Update remote user >>{{ sys_user }}<< ssh-config"
        template:
          dest: "/home/{{ sys_user }}/.ssh/config"
          src: ../templates/ssh-config.j2
          owner: "{{ sys_user }}"
          group: "{{ sys_user }}"
          mode: 0644

      when: basic_setup

########### INITIAL PACKAGE UPDATES AND INSTALLS (basic_updates) ###################
    - block:
      - name: Ensure extra RPM repos are present
        copy:
          src: "{{ item }}"
          dest: /etc/yum.repos.d/
          owner: root
          group: root
          mode: 0644
        with_fileglob: ../files/yum-repos/*.repo

      - name: Make sure base-system packages are up to date
        dnf:
          name: "*"
          state: latest
        register: system_update

      - name: Restart the machine
        shell: sleep 2 && shutdown -r now "Ansible triggered restart"
        async: 1
        poll: 0
        ignore_errors: yes
        when: reboot #and system_update.changed
      
      - name: Wait for system to come online
        wait_for_connection:
          delay: 60
          sleep: 5
          timeout: 900
        when: reboot

      - name: Make sure local system has basic packages installed and up to date
        dnf:
          name: "{{ dnf_basic }}"
          state: latest

      - name: Make sure local system has additional third-party packages present and up to date
        dnf:
          name: "{{ dnf_extras }}"
          state: latest

      - name: Pip Installs
        pip:
          name: "{{ pip_basic }}"
          state: latest

      when: basic_updates

########### CONFIGURE PROFILES AND OTHER ODDITIES ABOUT THIS SYSTEM (basic_config) #
    - block:
      - name: Ensure there is a docker group
        group:
          name: docker

      - name: Ensure the system user belongs to the docker, and wheel groups
        user:
          name: root
          groups: docker,wheel
          append: yes
          state: present

      - name: Make sure BOTO is configured for Ansible
        template:
          dest: "/home/{{ sys_user }}/.boto"
          src: ../templates/boto-config.j2
          owner: root
          group: "{{ sys_user }}"

      - name: Make sure the Git profile is up to date
        template:
          dest: "/home/{{ sys_user }}/.gitconfig"
          src: ../templates/gitconfig.j2
          owner: "{{ sys_user }}"
          group: "{{ sys_user }}"

      when: basic_config

    - block: 
      - name: Ensure FZF is present
        git:
          repo: https://github.com/junegunn/fzf.git
          depth: 1
          dest: "/home/{{ sys_user }}/.fzf"
          clone: yes
        ignore_errors: yes
      
      - name: Ensure FZF is bootstrapped
        become: true
        become_user: root
        shell: "/home/{{ sys_user }}/.fzf/install --bin"
        async: 0
        poll: 0
        ignore_errors: yes

      - name: Ensure FZF is installed
        become: true
        become_user: "{{ sys_user }}"
        shell: "/home/{{ sys_user }}/.fzf/install --all"
        async: 0
        poll: 0
        ignore_errors: yes

      - name: Explode remote binaries
        unarchive:
          src: "{{ item.value }}"
          dest: "/usr/bin/"
          remote_src: true
          validate_certs: no
        with_dict: "{{ binaries_remote_archived }}"
        become: yes
        become_user: root
        ignore_errors: yes

      - name: Download remote binaries
        get_url:
          url: "{{ item.value }}"
          dest: "/usr/bin/{{ item.key }}"
          validate_certs: no
          mode: 0751
        with_dict: "{{ binaries_remote }}"
        become: yes
        become_user: root
        ignore_errors: yes

      when: basic_updates

########### MAKE SURE OUR SOURCE CODE IS CHECKED OUT AND READY TO GO ###############
    - block:
      - name: Make sure repo-root folder is present
        file:
          path: "/home/{{ sys_user }}/Extra/repos"
          state: directory
          owner: "{{ sys_user }}"
          group: "{{ sys_user }}"

      - name: Make sure third-party repo folder is present
        file:
          path: "/home/{{ sys_user }}/Extra/repos/third-party"
          state: directory
          owner: "{{ sys_user }}"
          group: "{{ sys_user }}"

      - name: Clone Git repos (key-based)
        git:
          repo: "{{ item.value.repo }}"
          dest: "/home/{{ sys_user }}/Extra/repos/{{ item.value.class }}/{{ item.key }}"
          key_file: "/home/{{ sys_user }}/.ssh/id_rsa"
          accept_hostkey: yes
        with_dict: "{{ key_based_git_repos }}"
        ignore_errors: yes

      - name: Clone Git repos (http-based)
        git:
          repo: "{{ item.value.repo }}"
          dest: "/home/{{ sys_user }}/Extra/repos/{{ item.value.class }}/{{ item.key }}"
          key_file: "/home/{{ sys_user }}/.ssh/id_rsa"
        with_dict: "{{ http_based_git_repos }}"
        ignore_errors: yes

      when: get_repos
      become_user: "{{ sys_user}}"
      become: true
